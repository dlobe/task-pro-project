[{"D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\index.js":"1","D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\UserContext.js":"2","D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\Navbar.jsx":"3","D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\forms\\EditOrganization.jsx":"4","D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\ProtectedRoute.js":"5","D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\forms\\AddMeeting.jsx":"6","D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\service.js":"7","D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\Login.jsx":"8","D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\forms\\EditContact.jsx":"9","D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\Home.jsx":"10","D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\Signup.jsx":"11","D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\forms\\EditTask.jsx":"12"},{"size":662,"mtime":1700486758057,"results":"13","hashOfConfig":"14"},{"size":87,"mtime":1700486759223,"results":"15","hashOfConfig":"14"},{"size":5205,"mtime":1700493894783,"results":"16","hashOfConfig":"14"},{"size":3813,"mtime":1700486760175,"results":"17","hashOfConfig":"14"},{"size":366,"mtime":1700486758675,"results":"18","hashOfConfig":"14"},{"size":12532,"mtime":1700486759598,"results":"19","hashOfConfig":"14"},{"size":7543,"mtime":1700490415702,"results":"20","hashOfConfig":"14"},{"size":5160,"mtime":1700490551211,"results":"21","hashOfConfig":"14"},{"size":6434,"mtime":1700492136347,"results":"22","hashOfConfig":"14"},{"size":1207,"mtime":1700494415732,"results":"23","hashOfConfig":"14"},{"size":4994,"mtime":1700486759087,"results":"24","hashOfConfig":"14"},{"size":7791,"mtime":1700486760265,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1p1mntk",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\index.js",[],["54","55"],"D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\UserContext.js",[],"D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\Navbar.jsx",["56"],"D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\forms\\EditOrganization.jsx",[],["57","58"],"D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\ProtectedRoute.js",[],"D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\forms\\AddMeeting.jsx",["59"],"D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\service.js",[],"D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\Login.jsx",["60","61","62"],"import React, { useEffect, useContext, useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\nimport { getUser, login, setToken, getStaticContent } from \"./service\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { UserContext } from \"./UserContext\";\n// import { getStaticContent } from \"./service\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function Login() {\n  const classes = useStyles();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [staticcontent,  setStaticContent] = useState(null);\n  const { setUser } = useContext(UserContext);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n\n    const fetchStaticContent = async () => {\n      //setLoading(true);\n      try {\n        // setToken();\n        const { data } = await getStaticContent();\n        setStaticContent(data);\n      } catch (ex) {\n        // snackbar(\"Unable to fetch data.\", { variant: \"error\" });\n      } finally {\n        //setLoading(false);\n      }\n    };\n    fetchStaticContent();\n\n  })\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      setLoading(true);\n      await login(username, password);\n     \n      setToken();\n     \n      setUser(getUser());\n   \n      navigate(\"/\", { replace: true });\n    } catch (ex) {\n      if (ex.response?.data?.code === \"UserNotConfirmedException\") {\n        navigate(\"/signup\", {\n          state: {\n            username,\n          },\n        });\n      }\n      setError(ex.response.data.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <div className={classes.paper}>\n        {/* <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n          \n        </Avatar> */}\n        <img src={ (staticcontent == null) ? '' : staticcontent[0].Content.logo } />\n        <Typography component=\"h1\" variant=\"h5\">\n          {/* { console.log(staticcontent) } */}\n          { (staticcontent == null) ? '' : staticcontent[0].Content.loginTitle }\n        </Typography>\n        <form className={classes.form} noValidate onSubmit={handleSubmit}>\n          <Box marginY={2} hidden={error === null ? true : false}>\n            <Alert severity=\"error\">{error}</Alert>\n          </Box>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label= { (staticcontent == null) ? '' : staticcontent[0].Content.inputEmail }\n                name=\"email\"\n                autoComplete=\"email\"\n                value={username}\n                onChange={(event) => setUsername(event.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                value={password}\n                onChange={(event) => setPassword(event.target.value)}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            disabled={loading}\n          >\n            {loading ? <CircularProgress /> :  (staticcontent == null) ? '' : staticcontent[0].Content.btnLogin }\n          </Button>\n          <Grid container justify=\"space-between\">\n            <Grid item>\n              <Link\n                component={RouterLink}\n                to=\"/forgot-password\"\n                variant=\"body2\"\n              >\n                Forgot Password?\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link component={RouterLink} to=\"/signup\" variant=\"body2\">\n                Don't have an account? Sign Up\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n    </Container>\n  );\n}\n",["63","64"],"D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\forms\\EditContact.jsx",[],"D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\Home.jsx",["65"],"D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\Signup.jsx",[],"D:\\Desktop\\fiver\\David Lobe\\project\\TaskPro\\TaskPro-Backend-New\\src\\forms\\EditTask.jsx",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":101,"column":27,"nodeType":"72","messageId":"73","endLine":101,"endColumn":29},{"ruleId":"66","replacedBy":"74"},{"ruleId":"68","replacedBy":"75"},{"ruleId":"70","severity":1,"message":"71","line":55,"column":60,"nodeType":"72","messageId":"73","endLine":55,"endColumn":62},{"ruleId":"76","severity":1,"message":"77","line":2,"column":8,"nodeType":"78","messageId":"79","endLine":2,"endColumn":14},{"ruleId":"76","severity":1,"message":"80","line":7,"column":8,"nodeType":"78","messageId":"79","endLine":7,"endColumn":24},{"ruleId":"81","severity":1,"message":"82","line":101,"column":9,"nodeType":"83","endLine":101,"endColumn":85},{"ruleId":"66","replacedBy":"84"},{"ruleId":"68","replacedBy":"85"},{"ruleId":"70","severity":1,"message":"71","line":25,"column":35,"nodeType":"72","messageId":"73","endLine":25,"endColumn":37},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["86"],["87"],"no-unused-vars","'Avatar' is defined but never used.","Identifier","unusedVar","'LockOutlinedIcon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["86"],["87"],"no-global-assign","no-unsafe-negation"]